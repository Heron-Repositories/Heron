Script started on 2022-07-18 23:14:21-05:00 [TERM="tmux-256color" TTY="/dev/pts/3" COLUMNS="201" LINES="77"]
[1m[7m%[27m[1m[0m                                                                                                                                                                                                         [0m[27m[24m[J
[1;33mlarryc[0m@[1;32mAUS1S-LACAMPBE2[0m:[1;36m~/projects/Heron[0m [1;35mÓÇ† [0m[1;35mmain[0m  is [1;38;5;208müì¶ [0m[1;38;5;208mv0.1.0[0m [1;33müêç [0m[1;33m[0m[1;33mv3.8.10[0m[1;33m [0m 

[38;5;178mHeron[0m[38;5;178m [0m
[1;32m$[0m [K[?1h=[?2004h[1m[31mg[0m[39m[0m[32mg[32mc[39m[32mg[32mc[32mc[39m -
zsh: do you wish to see all 2452 possibilities (811 lines)? y[J[0m-###                                                                          -- print commands to run this compilation                                                                                
-aux-info                                                                     -- Emit declaration information into <file>                                                                              
-B                                                                            -- Add <prefix> to the compiler's search paths                                                                           
-c                                                                            -- Compile and assemble, but do not link                                                                                 
-C                                                                            -- do not discard comments during preprocess                                                                             
-CC                                                                           -- do not discard comments, including macro expansion                                                                    
-dumpbase                                                                     -- Set the file basename to be used for dumps                                                                            
-dumpdir                                                                      -- Set the directory name to be used for dumps                                                                           
-dumpmachine                                                                  -- Display the compiler's target processor                                                                               
-dumpspecs                                                                    -- Display all of the built in spec strings                                                                              
-dumpversion                                                                  -- Display the version of the compiler                                                                                   
-E                                                                            -- Preprocess only; do not compile, assemble or link                                                                     
-fabi-version                                                                 -- Use version <n> of the C++ ABI (default: 2)                                                                           
-faggressive-loop-optimizations                                               -- Aggressively optimize loops using language constraints                                                                
-falign-functions                                                             -- Align the start of functions                                                                                          
-falign-jumps                                                                 -- Align labels which are only reached by jumping                                                                        
-falign-labels                                                                -- Align all labels                                                                                                      
-falign-loops                                                                 -- Align the start of loops                                                                                              
-fassociative-math                                                            -- Allow optimization for floating-point arithmetic which may change the result of the operation due to rounding         
-fasynchronous-unwind-tables                                                  -- Generate unwind tables that are exact at each instruction boundary                                                    
-fauto-inc-dec                                                                -- Generate auto-inc/dec instructions                                                                                    
-fbounds-check                                                                -- Generate code to check bounds before indexing arrays                                                                  
-fbranch-count-reg                                                            -- Replace add, compare, branch with branch on count register                                                            
-fbranch-probabilities                                                        -- Use profiling information for branch probabilities                                                                    
-fbranch-target-load-optimize                                                 -- Perform branch target load optimization before prologue / epilogue threading                                          
-fbranch-target-load-optimize2                                                -- Perform branch target load optimization after prologue / epilogue threading                                           
-fbtr-bb-exclusive                                                            -- Restrict target load migration not to re-use registers in any basic block                                             
-fcaller-saves                                                                -- Save registers around function calls                                                                                  
-fcall-saved-                                                                 -- Mark <register> as being preserved across functions                                                                   
-fcall-used-                                                                  -- Mark <register> as being corrupted by function calls                                                                  
-fcheck-data-deps                                                             -- Compare the results of several data dependence analyzers                                                              
-fcode-hoisting                                                               -- Enable code hoisting                                                                                                  
-fcombine-stack-adjustments                                                   -- Looks for opportunities to reduce stack adjustments and stack references                                              
-fcommon                                                                      -- Do not put uninitialized globals in the common section                                                                
-fcompare-debug                                                               -- Compile with and without e.g. -gtoggle, and compare the final-insns dump                                              
-fcompare-debug-second                                                        -- Run only the second compilation of -fcompare-debug                                                                    
-fcompare-elim                                                                -- Perform comparison elimination after register allocation has finished                                                 
-fconserve-stack                                                              -- Do not perform optimizations increasing noticeably stack usage                                                        
-fcprop-registers                                                             -- Perform a register copy-propagation optimization pass                                                                 
-fcrossjumping                                                                -- Perform cross-jumping optimization                                                                                    
-fcse-follow-jumps                                                            -- When running CSE, follow jumps to their targets                                                                       
-fcx-fortran-rules                                                            -- Complex multiplication and division follow Fortran rules                                                              
-fcx-limited-range                                                            -- Omit range reduction step when performing complex division                                                            
-fdata-sections                                                               -- Place data items into their own section                                                                               
-fdbg-cnt                                                                     -- ,<counter>-<limit>,...) Set the debug counter limit                                                                   
-fdbg-cnt-list                                                                -- List all available debugging counters with their limits and counts                                                    
-fdce                                                                         -- Use the RTL dead code elimination pass                                                                                
-fdebug-prefix-map                                                            -- Map one directory name to another in debug information                                                                
-fdebug-types-section                                                         -- Output .debug_types section when using DWARF v4 debuginfo                                                             
-fdefer-pop                                                                   -- Defer popping functions args from stack until later                                                                   
-fdelayed-branch                                                              -- Attempt to fill delay slots of branch instructions                                                                    
-fdelete-dead-exceptions                                                      -- Delete dead instructions that may throw exceptions                                                                    
-fdelete-null-pointer-checks                                                  -- Delete useless null pointer checks                                                                                    
-fdevirtualize                                                                -- Try to convert virtual calls to direct ones                                                                           
-fdevirtualize-speculatively                                                  -- Perform speculative devirtualization                                                                                  
-fdiagnostics-color                                                           -- Colorize diagnostics                                                                                                  
-fdiagnostics-generate-patch                                                  -- Print fix-it hints to stderr in unified diff format                                                                   
-fdiagnostics-parseable-fixits                                                -- Print fixit hints in machine-readable form                                                                            
-fdiagnostics-show-caret                                                      -- Show the source line with a caret indicating the column                                                               
-fdiagnostics-show-location                                                   -- How often to emit source location at the beginning of line-wrapped diagnostics                                        
-fdiagnostics-show-option                                                     -- Amend appropriate diagnostic messages with the command line option that controls them                                 
-fdse                                                                         -- Use the RTL dead store elimination pass                                                                               
-fdump-final-insns                                                            -- Dump to filename the insns at the end of translation                                                                  
-fdump-go-spec                                                                -- Write all declarations to file as Go code                                                                             
-fdump-noaddr                                                                 -- Suppress output of addresses in debugging dumps                                                                       
-fdump-passes                                                                 -- Dump optimization passes                                                                                              
-fdump-unnumbered                                                             -- Suppress output of instruction numbers, line number notes and addresses in debugging dumps                            
-fdump-unnumbered-links                                                       -- Suppress output of previous and next insn numbers in debugging dumps                                                  
-fdwarf2-cfi-asm                                                              -- Enable CFI tables via GAS assembler directives                                                                        
-fearly-inlining                                                              -- Perform early inlining                                                                                                
-feliminate-dwarf2-dups                                                       -- Perform DWARF2 duplicate elimination                                                                                  
-feliminate-unused-debug-symbols              -feliminate-unused-debug-types  -- Perform unused type elimination in debug info                                                                         
-femit-class-debug-always                                                     -- Do not suppress C++ class debug information                                                                           
-fexceptions                                                                  -- Enable exception handling                                                                                             
-fexcess-precision                                                            -- Specify handling of excess floating-point precision                                                                   
[J-fexpensive-optimizations                     [J                                [J-- Perform a number of minor, expensive optimizations                                                                    [J
-ffast-math                                   [J                                [J-- Sets -fno-math-errno, -funsafe-math-optimizations, -ffinite-math-only, -fno-rounding-math, -fno-signaling-nans and -fc[J
-ffat-lto-objects                             [J                                [J-- Output lto objects containing both the intermediate language and binary output                                        [J
-ffinite-math-only                            [J                                [J-- Assume no NaNs or infinities are generated                                                                            [J
-ffixed-                                      [J                                [J-- Mark <register> as being unavailable to the compiler                                                                  [J
-ffloat-store                                 [J                                [J-- Don't allocate floats and doubles in extended- precision registers                                                    [J
-fforward-propagate                           [J                                [J-- Perform a forward propagation pass on RTL                                                                             [J
-ffp-contract                                 [J                                [J-- Perform floating-point expression contraction                                                                         [J
-ffp-contract                                 [J                                [J-- Perform floating- point expression contraction (default: fast)                                                        [J
-ffp-int-builtin-inexact                      [J                                [J-- Allow built-in functions ceil, floor, round, trunc to raise "inexact" exceptions                                      [J
-ffunction-cse                                [J                                [J-- Allow function addresses to be held in registers                                                                      [J
-ffunction-sections                           [J                                [J-- Place each function into its own section                                                                              [J
-fgcse                                        [J                                [J-- Perform global common subexpression elimination                                                                       [J
-fgcse-after-reload                           [J                                [J-- Perform global common subexpression elimination after register allocation has finished                                [J
-fgcse-las                                    [J                                [J-- Perform redundant load after store elimination in global common subexpression elimination                             [J
-fgcse-lm                                     [J                                [J-- Perform enhanced load motion during global common subexpression elimination                                           [J
-fgcse-sm                                     [J                                [J-- Perform store motion after global common subexpression elimination                                                    [J
-fgnu-tm                                      [J                                [J-- Enable support for GNU transactional memory                                                                           [J
-fgraphite                                    [J                                [J-- Enable in and out of Graphite representation                                                                          [J
-fgraphite-identity                           [J                                [J-- Enable Graphite Identity transformation                                                                               [J
-fguess-branch-probability                    [J                                [J-- Enable guessing of branch probabilities                                                                               [J
-fhoist-adjacent-loads                        [J                                [J-- Enable hoisting adjacent loads to encourage generating conditional move instructions                                  [J
-fident                                       [J                                [J-- Process #ident directives                                                                                             [J
-fif-conversion                               [J                                [J-- Perform conversion of conditional jumps to branchless equivalents                                                     [J
-fif-conversion2                              [J                                [J-- Perform conversion of conditional jumps to conditional execution                                                      [J
-findirect-inlining                           [J                                [J-- Perform indirect inlining                                                                                             [J
-finhibit-size-directive                      [J                                [J-- Do not generate .size directives                                                                                      [J
-finline                                      [J                                [J-- Enable inlining of function declared "inline", disabling disables all inlining                                        [J
-finline-atomics                              [J                                [J-- Inline __atomic operations when a lock free instruction sequence is available                                         [J
-finline-functions                            [J                                [J-- Integrate functions not declared "inline" into their callers when profitable                                          [J
-finline-functions-called-once                [J                                [J-- Integrate functions only required by their single caller                                                              [J
-finline-limit                                [J                                [J-- Limit the size of inlined functions to <number>                                                                       [J
-finline-small-functions                      [J                                [J-- Integrate functions into their callers when code size is known not to grow                                            [J
-finstrument-functions                        [J                                [J-- Instrument function entry and exit with profiling calls                                                               [J
-finstrument-functions-exclude-file-list      [J                                [J-- Do not instrument functions listed in files                                                                           [J
-finstrument-functions-exclude-function-list  [J                                [J-- Do not instrument listed functions                                                                                    [J
-fipa-bit-cp                                  [J                                [J-- Perform interprocedural bitwise constant propagation                                                                  [J
-fipa-cp                                      [J                                [J-- Perform interprocedural constant propagation                                                                          [J
-fipa-cp-clone                                [J                                [J-- Perform cloning to make Interprocedural constant propagation stronger                                                 [J
-fipa-icf                                     [J                                [J-- Perform Identical Code Folding for functions and read-only variables                                                  [J
-fipa-icf-functions                           [J                                [J-- Perform Identical Code Folding for functions                                                                          [J
-fipa-icf-variables                           [J                                [J-- Perform Identical Code Folding for variables                                                                          [J
-fipa-profile                                 [J                                [J-- Perform interprocedural profile propagation                                                                           [J
-fipa-pta                                     [J                                [J-- Perform interprocedural points-to analysis                                                                            [J
-fipa-pure-const                              [J                                [J-- Discover pure and const functions                                                                                     [J
-fipa-ra                                      [J                                [J-- Use caller save register across calls if possible                                                                     [J
-fipa-reference                               [J                                [J-- Discover readonly and non addressable static variables                                                                [J
-fipa-sra                                     [J                                [J-- Perform interprocedural reduction of aggregates                                                                       [J
-fipa-vrp                                     [J                                [J-- Perform IPA Value Range Propagation                                                                                   [J
-fira-algorithm                               [J                                [J-- Set the used IRA algorithm                                                                                            [J
-fira-hoist-pressure                          [J                                [J-- Use IRA based register pressure calculation in RTL hoist optimizations                                                [J
-fira-loop-pressure                           [J                                [J-- Use IRA based register pressure calculation in RTL loop optimizations                                                 [J
-fira-region                                  [J                                [J-- Set regions for IRA                                                                                                   [J
-fira-share-save-slots                        [J                                [J-- Share slots for saving different hard registers                                                                       [J
-fira-share-spill-slots                       [J                                [J-- Share stack slots for spilled pseudo-registers                                                                        [J
-fira-verbose                                 [J                                [J-- Control IRA's level of diagnostic messages                                                                            [J
-fisolate-erroneous-paths-attribute           [J                                [J-- Detect paths that trigger erroneous or undefined behavior due to a null value being used in a way forbidden by a retur[J
-fisolate-erroneous-paths-dereference         [J                                [J-- Detect paths that trigger erroneous or undefined behavior due to dereferencing a null pointer.  Isolate those paths fr[J
-fivopts                                      [J                                [J-- Optimize induction variables on trees                                                                                 [J
-fjump-tables                                 [J                                [J-- Use jump tables for sufficiently large switch statements                                                              [J
-fkeep-inline-functions                       [J                                [J-- Generate code for functions even if they are fully inlined                                                            [J
-fkeep-static-consts                          [J                                [J-- Emit static const variables even if they are not used                                                                 [J
-fleading-underscore                          [J                                [J-- Give external symbols a leading underscore                                                                            [J
-flifetime-dse                                [J                                [J-- Tell DSE that the storage for a C++ object is dead when the constructor starts and when the destructor finishes       [J
-flive-range-shrinkage                        [J                                [J-- Relief of register pressure through live range shrinkage                                                              [J
-floop-nest-optimize                          [J                                [J-- Enable the loop nest optimizer                                                                                        [J
-floop-parallelize-all                        [J                                [J-- Mark all loops as parallel                                                                                            [J
-flra-remat                                   [J                                [J-- Do CFG-sensitive rematerialization in LRA                                                                             [J
-flto                                         [J                                [J-- Enable link-time optimization                                                                                         [J
-flto-compression-level                       [J                                [J-- Use specified zlib compression level for IL                                                                           [J
-flto-odr-type-merging                        [J                                [J-- Merge C++ types using One Definition Rule                                                                             [J
-flto-partition                               [J                                [J-- Partition symbols and vars at linktime based on object files they originate from                                      [J
-flto-report                                  [J                                [J-- Report various link-time optimization statistics                                                                      [J
-fmath-errno                                  [J                                [J-- Set errno after built-in math functions                                                                               [J
-fmax-errors                                  [J                                [J-- Maximum number of errors to report                                                                                    [J
-fmem-report                                  [J                                [J-- Report on permanent memory allocation                                                                                 [J
-fmem-report-wpa                              [J                                [J-- Report on permanent memory allocation in WPA only                                                                     [J
-fmerge-all-constants                         [J                                [J-- Attempt to merge identical constants and constant variables                                                           [J
-fmerge-constants                             [J                                [J-- Attempt to merge identical constants across compilation units                                                         [J
-fmerge-debug-strings                         [J                                [J-- Attempt to merge identical debug strings across compilation units                                                     [J
-fmessage-length                              [J                                [J-- Limit diagnostics to <number> characters per line.  0 suppresses line-wrapping                                        [J
-fmodulo-sched                                [J                                [J-- Perform SMS based modulo scheduling before the first scheduling pass                                                  [J
-fmodulo-sched-allow-regmoves                 [J                                [J-- Perform SMS based modulo scheduling with register moves allowed                                                       [J
-fmove-loop-invariants                        [J                                [J-- Move loop invariant computations out of loops                                                                         [J
-fnon-call-exceptions                         [J                                [J-- Support synchronous non-call exceptions                                                                               [J
-fno-threadsafe-statics                       [J                                [J-- Do not generate thread-safe code for initializing local statics                                                       [J
-fnothrow-opt                                 [J                                [J-- Treat a throw() exception specification as noexcept to improve code size                                              [J
-fomit-frame-pointer                          [J                                [J-- When possible do not generate stack frames                                                                            [J
-foptimize-sibling-calls                      [J                                [J-- Optimize sibling and tail recursive calls                                                                             [J
-foptimize-strlen                             [J                                [J-- Enable string length optimizations on trees                                                                           [J
-fopt-info                                    [J                                [J-- Enable all optimization info dumps on stderr                                                                          [J
-fopt-info-type                               [J-fopt-info                      [J-- Dump compiler optimization details                                                                                    [J
-fpack-struct                                 [J                                [J-- Pack structure members together without holes                                                                         [J
-fpack-struct                                 [J                                [J-- Set initial maximum structure member alignment                                                                        [J
-fpartial-inlining                            [J                                [J-- Perform partial inlining                                                                                              [J
-fpcc-struct-return                           [J                                [J-- Return small aggregates in memory, not registers                                                                      [J
-fpeel-loops                                  [J                                [J-- Perform loop peeling                                                                                                  [J
-fpeephole                                    [J                                [J-- Enable machine specific peephole optimizations                                                                        [J
-fpeephole2                                   [J                                [J-- Enable an RTL peephole pass before sched2                                                                             [J
-fpic                                         [J                                [J-- Generate position-independent code if possible (small mode)                                                           [J
-fPIC                                         [J                                [J-- Generate position-independent code if possible (large mode)                                                           [J
-fpie                                         [J                                [J-- Generate position-independent code for executables if possible (small mode)                                           [J
-fPIE                                         [J                                [J-- Generate position-independent code for executables if possible (large mode)                                           [J
-fplt                                         [J                                [J-- Use PLT for PIC calls (-fno-plt- load the address from GOT at call site)                                              [J
-fplugin                                      [J                                [J-- Specify a plugin to load                                                                                              [J
-fplugin-arg-                                 [J                                [J-- Specify argument <key>=<value> for plugin <name>                                                                      [J
-fpost-ipa-mem-report                         [J-fpre-ipa-mem-report            [J-- Report on memory allocation before interprocedural optimization                                                       [J
-fpredictive-commoning                        [J                                [J-- Run predictive commoning optimization                                                                                 [J
-fprefetch-loop-arrays                        [J                                [J-- Generate prefetch instructions, if available, for arrays in loops                                                     [J
-fprintf-return-value                         [J                                [J-- Treat known sprintf return values as constants                                                                        [J
-fprofile                                     [J                                [J-- Enable basic program profiling code                                                                                   [J
-fprofile-arcs                                [J                                [J-- Insert arc-based program profiling code                                                                               [J
-fprofile-correction                          [J                                [J-- Enable correction of flow inconsistent profile data input                                                             [J
-fprofile-dir                                 [J                                [J-- Set the top-level directory for storing the profile data                                                              [J
-fprofile-generate                            [J                                [J-- Enable common options for generating profile info for profile feedback directed optimizations                         [J
-fprofile-report                              [J                                [J-- Report on consistency of profile                                                                                      [J
-fprofile-use                                 [J                                [J-- Enable common options for performing profile feedback directed optimizations                                          [J
-fprofile-values                              [J                                [J-- Insert code to profile values of expressions                                                                          [J
-frandom-seed                                 [J                                [J-- Use <string> as random seed                                                                                           [J
-freciprocal-math                             [J                                [J-- Same as -fassociative-math for expressions which include division                                                     [J
-frecord-gcc-switches                         [J                                [J-- Record gcc command line switches in the object file                                                                   [J
-free                                         [J                                [J-- Turn on Redundant Extensions Elimination pass                                                                         [J
-freg-struct-return                           [J                                [J-- Return small aggregates in registers                                                                                  [J
-frename-registers                            [J                                [J-- Perform a register renaming optimization pass                                                                         [J
-freorder-blocks                              [J                                [J-- Reorder basic blocks to improve code placement                                                                        [J
-freorder-blocks-algorithm                    [J                                [J-- Set the used basic block reordering algorithm                                                                         [J
-freorder-blocks-and-partition                [J                                [J-- Reorder basic blocks and partition into hot and cold sections                                                         [J
-freorder-functions                           [J                                [J-- Reorder functions to improve code placement                                                                           [J
-frequire-return-statement                    [J                                [J-- Functions which return values must end with return statements                                                         [J
-frerun-cse-after-loop                        [J                                [J-- Add a common subexpression elimination pass after loop optimizations                                                  [J
-freschedule-modulo-scheduled-loops           [J                                [J-- Enable/Disable the traditional scheduling in loops that already passed modulo scheduling                              [J
-frounding-math                               [J                                [J-- Disable optimizations that assume default FP rounding behavior                                                        [J
-frtti                                        [J                                [J-- Generate run time type descriptor information                                                                         [J
-fsanitize                                    [J                                [J-- Enable AddressSanitizer, a memory error detector                                                                      [J
-fsched2-use-superblocks                      [J                                [J-- If scheduling post reload, do superblock scheduling                                                                   [J
-fsched-critical-path-heuristic               [J                                [J-- Enable the critical path heuristic in the scheduler                                                                   [J
-fsched-dep-count-heuristic                   [J                                [J-- Enable the dependent count heuristic in the scheduler                                                                 [J
-fsched-group-heuristic                       [J                                [J-- Enable the group heuristic in the scheduler                                                                           [J
-fsched-interblock                            [J                                [J-- Enable scheduling across basic blocks                                                                                 [J
-fsched-last-insn-heuristic                   [J                                [J-- Enable the last instruction heuristic in the scheduler                                                                [J
-fsched-pressure                              [J                                [J-- Enable register pressure sensitive insn scheduling                                                                    [J
-fsched-rank-heuristic                        [J                                [J-- Enable the rank heuristic in the scheduler                                                                            [J
-fsched-spec                                  [J                                [J-- Allow speculative motion of non-loads                                                                                 [J
-fsched-spec-insn-heuristic                   [J                                [J-- Enable the speculative instruction heuristic in the scheduler                                                         [J
-fsched-spec-load                             [J                                [J-- Allow speculative motion of some loads                                                                                [J
-fsched-spec-load-dangerous                   [J                                [J-- Allow speculative motion of more loads                                                                                [J
-fsched-stalled-insns                         [J                                [J-- Allow premature scheduling of queued insns                                                                            [J
-fsched-stalled-insns                         [J                                [J-- Set number of queued insns that can be prematurely scheduled                                                          [J
-fsched-stalled-insns-dep                     [J-fsched-stalled-insns-dep       [J-- Set dependence distance checking in premature scheduling of queued insns                                              [J
-fschedule-fusion                             [J                                [J-- Perform a target dependent instruction fusion optimization pass                                                       [J
-fschedule-insns                              [J                                [J-- Reschedule instructions before register allocation                                                                    [J
-fschedule-insns2                             [J                                [J-- Reschedule instructions after register allocation                                                                     [J
-fsched-verbose                               [J                                [J-- Set the verbosity level of the scheduler                                                                              [J
-fsection-anchors                             [J                                [J-- Access data in the same section from shared anchor points                                                             [J
-fselective-scheduling                        [J                                [J-- Schedule instructions using selective scheduling algorithm                                                            [J
-fselective-scheduling2                       [J                                [J-- Run selective scheduling after reload                                                                                 [J
-fsel-sched-pipelining                        [J                                [J-- Perform software pipelining of inner loops during selective scheduling                                                [J
-fsel-sched-pipelining-outer-loops            [J                                [J-- Perform software pipelining of outer loops during selective scheduling                                                [J
-fsel-sched-reschedule-pipelined              [J                                [J-- Reschedule pipelined regions without pipelining                                                                       [J
-fshort-enums                                 [J                                [J-- Use the narrowest integer type possible for enumeration types                                                         [J
-fshort-wchar                                 [J                                [J-- Force the underlying type for "wchar_t" to be "unsigned short"                                                        [J
-fshow-column                                 [J                                [J-- Show column numbers in diagnostics, when available                                                                    [J
-fshrink-wrap                                 [J                                [J-- Emit function prologues only before parts of the function that need it, rather than at the top of the function        [J
-fshrink-wrap-separate                        [J                                [J-- Shrink-wrap parts of the prologue and epilogue separately                                                             [J
-fsignaling-nans                              [J                                [J-- Disable optimizations observable by IEEE signaling NaNs                                                               [J
-fsigned-zeros                                [J                                [J-- Disable floating point optimizations that ignore the IEEE signedness of zero                                          [J
-fsimd-cost-model                             [J                                [J-- Specifies the vectorization cost model for code marked with a simd directive                                          [J
-fsingle-precision-constant                   [J                                [J-- Convert floating point constants to single precision constants                                                        [J
-fsplit-ivs-in-unroller                       [J                                [J-- Split lifetimes of induction variables when loops are unrolled                                                        [J
-fsplit-loops                                 [J                                [J-- Perform loop splitting                                                                                                [J
-fsplit-paths                                 [J                                [J-- Split paths leading to loop backedges                                                                                 [J
-fsplit-stack                                 [J                                [J-- Generate discontiguous stack frames                                                                                   [J
-fsplit-wide-types                            [J                                [J-- Split wide types into independent registers                                                                           [J
-fssa-backprop                                [J                                [J-- Enable backward propagation of use properties at the SSA level                                                        [J
-fssa-phiopt                                  [J                                [J-- Optimize conditional patterns using SSA PHI nodes                                                                     [J
-fstack-check                                 [J                                [J-- Insert stack checking code into the program.  -fstack-check=specific if to argument given                             [J
-fstack-limit-register                        [J                                [J-- Trap if the stack goes past <register>                                                                                [J
-fstack-limit-symbol                          [J                                [J-- Trap if the stack goes past symbol <name>                                                                             [J
-fstack-protector                             [J                                [J-- Use propolice as a stack protection method                                                                            [J
-fstack-protector-all                         [J                                [J-- Use a stack protection method for every function                                                                      [J
-fstack-protector-explicit                    [J                                [J-- Use stack protection method only for functions with the stack_protect attribute                                       [J
-fstack-protector-strong                      [J                                [J-- Use a smart stack protection method for certain functions                                                             [J
-fstack-reuse                                 [J                                [J-- Set stack reuse level for local variables                                                                             [J
-fstack-usage                                 [J                                [J-- Output stack usage information on a per-function basis                                                                [J
-fstdarg-opt                                  [J                                [J-- Optimize amount of stdarg registers saved to stack at start of function                                               [J
-fstore-merging                               [J                                [J-- Merge adjacent stores                                                                                                 [J
-fstrict-aliasing                             [J                                [J-- Assume strict aliasing rules apply                                                                                    [J
-fstrict-enums                                [J                                [J-- Assume that values of enumeration type are always within the minimum range of that type                               [J
-fstrict-overflow                             [J                                [J-- Treat signed overflow as undefined                                                                                    [J
-fstrict-volatile-bitfields                   [J                                [J-- Force bitfield accesses to match their type width                                                                     [J
-fsync-libcalls                               [J                                [J-- Implement __atomic operations via libcalls to legacy __sync functions                                                 [J
-fsyntax-only                                 [J                                [J-- Check for syntax errors, then stop                                                                                    [J
-ftest-coverage                               [J                                [J-- Create data files needed by "gcov"                                                                                    [J
-fthread-jumps                                [J                                [J-- Perform jump threading optimizations                                                                                  [J
-ftime-report                                 [J                                [J-- Report the time taken by each compiler pass                                                                           [J
-ftls-model                                   [J                                [J-- Set the default thread-local storage code generation model                                                            [J
-ftracer                                      [J                                [J-- Perform superblock formation via tail duplication                                                                     [J
-ftrapping-math                               [J                                [J-- Assume floating-point operations can trap                                                                             [J
-ftrapv                                       [J                                [J-- Trap for signed overflow in addition, subtraction and multiplication                                                  [J
-ftree-bit-ccp                                [J                                [J-- Enable SSA-BIT-CCP optimization on trees                                                                              [J
-ftree-builtin-call-dce                       [J                                [J-- Enable conditional dead code elimination for builtin calls                                                            [J
-ftree-ccp                                    [J                                [J-- Enable SSA-CCP optimization on trees                                                                                  [J
-ftree-ch                                     [J                                [J-- Enable loop header copying on trees                                                                                   [J
-ftree-coalesce-vars                          [J                                [J-- Enable SSA coalescing of user variables                                                                               [J
-ftree-copy-prop                              [J                                [J-- Enable copy propagation on trees                                                                                      [J
-ftree-cselim                                 [J                                [J-- Transform condition stores into unconditional ones                                                                    [J
-ftree-dce                                    [J                                [J-- Enable SSA dead code elimination optimization on trees                                                                [J
-ftree-dominator-opts                         [J                                [J-- Enable dominator optimizations                                                                                        [J
-ftree-dse                                    [J                                [J-- Enable dead store elimination                                                                                         [J
-ftree-forwprop                               [J                                [J-- Enable forward propagation on trees                                                                                   [J
-ftree-fre                                    [J                                [J-- Enable Full Redundancy Elimination (FRE) on trees                                                                     [J
-ftree-loop-distribute-patterns               [J                                [J-- Enable loop distribution for patterns transformed into a library call                                                 [J
-ftree-loop-distribution                      [J                                [J-- Enable loop distribution on trees                                                                                     [J
-ftree-loop-if-convert                        [J                                [J-- Convert conditional jumps in innermost loops to branchless equivalents                                                [J
-ftree-loop-im                                [J                                [J-- Enable loop invariant motion on trees                                                                                 [J
-ftree-loop-ivcanon                           [J                                [J-- Create canonical induction variables in loops                                                                         [J
-ftree-loop-linear                            [J                                [J-- Enable loop interchange transforms.  Same as  -floop-interchange                                                      [J
-ftree-loop-optimize                          [J                                [J-- Enable loop optimizations on tree level                                                                               [J
-ftree-loop-vectorize                         [J                                [J-- Enable loop vectorization on trees                                                                                    [J
-ftree-lrs                                    [J                                [J-- Perform live range splitting during the SSA- >normal pass                                                             [J
-ftree-parallelize-loops                      [J                                [J-- Enable automatic parallelization of loops                                                                             [J
-ftree-partial-pre                            [J                                [J-- In SSA-PRE optimization on trees, enable partial- partial redundancy elimination                                      [J
-ftree-phiprop                                [J                                [J-- Enable hoisting loads from conditional pointers                                                                       [J
-ftree-pre                                    [J                                [J-- Enable SSA-PRE optimization on trees                                                                                  [J
-ftree-pta                                    [J                                [J-- Perform function-local points-to analysis on trees                                                                    [J
-ftree-reassoc                                [J                                [J-- Enable reassociation on tree level                                                                                    [J
-ftree-scev-cprop                             [J                                [J-- Enable copy propagation of scalar-evolution information                                                               [J
-ftree-sink                                   [J                                [J-- Enable SSA code sinking on trees                                                                                      [J
-ftree-slp-vectorize                          [J                                [J-- Enable basic block vectorization (SLP) on trees                                                                       [J
-ftree-slsr                                   [J                                [J-- Perform straight-line strength reduction                                                                              [J
-ftree-sra                                    [J                                [J-- Perform scalar replacement of aggregates                                                                              [J
-ftree-switch-conversion                      [J                                [J-- Perform conversions of switch initializations                                                                         [J
-ftree-tail-merge                             [J                                [J-- Enable tail merging on trees                                                                                          [J
-ftree-ter                                    [J                                [J-- Replace temporary expressions in the SSA->normal pass                                                                 [J
-ftree-vectorize                              [J                                [J-- Enable vectorization on trees                                                                                         [J
-ftree-vrp                                    [J                                [J-- Perform Value Range Propagation on trees                                                                              [J
-funconstrained-commons                       [J                                [J-- Assume common declarations may be overridden with ones with a larger trailing array                                   [J
-funroll-all-loops                            [J                                [J-- Perform loop unrolling for all loops                                                                                  [J
-funroll-loops                                [J                                [J-- Perform loop unrolling when iteration count is known                                                                  [J
-funsafe-loop-optimizations                   [J                                [J-- Allow loop optimizations to assume that the loops behave in normal way                                                [J
-funsafe-math-optimizations                   [J                                [J-- Allow math optimizations that may violate IEEE or ISO standards                                                       [J
-funswitch-loops                              [J                                [J-- Perform loop unswitching                                                                                              [J
-funwind-tables                               [J                                [J-- Just generate unwind tables for exception handling                                                                    [J
-fuse-ld                                      [J                                [J-- Use the specified linker instead of the default linker                                                                [J
-fuse-linker-plugin                           [J                                [J-- Use linker plugin during link-time optimization                                                                       [J
-fvariable-expansion-in-unroller              [J                                [J-- Apply variable expansion when loops are unrolled                                                                      [J
-fvar-tracking                                [J                                [J-- Perform variable tracking                                                                                             [J
-fvar-tracking-assignments                    [J                                [J-- Perform variable tracking by annotating assignments                                                                   [J
-fvar-tracking-assignments-toggle             [J                                [J-- Toggle -fvar-tracking-assignments                                                                                     [J
-fvar-tracking-uninit                         [J                                [J-- Perform variable tracking and also tag variables that are uninitialized                                               [J
-fvect-cost-model                             [J                                [J-- Specifies the cost model for vectorization                                                                            [J
-fverbose-asm                                 [J                                [J-- Add extra commentary to assembler output                                                                              [J
-fvisibility                                  [J                                [J-- Set the default symbol visibility                                                                                     [J
-fvpt                                         [J                                [J-- Use expression value profiles in optimizations                                                                        [J
-fweb                                         [J                                [J-- Construct webs and split unrelated uses of single variable                                                            [J
-fwhole-program                               [J                                [J-- Perform whole program optimizations                                                                                   [J
-fwrapv                                       [J                                [J-- Assume signed arithmetic overflow wraps around                                                                        [J
-fzero-initialized-in-bss                     [J                                [J-- Put zero initialized data in the bss section                                                                          [J
-gno-pubnames                                 [J                                [J-- Don't generate DWARF pubnames and pubtypes sections                                                                   [J
-gno-record-gcc-switches                      [J                                [J-- Don't record gcc command line switches in DWARF DW_AT_producer                                                        [J
-gno-split-dwarf                              [J                                [J-- Don't generate debug information in separate .dwo files                                                               [J
-gno-strict-dwarf                             [J                                [J-- Emit DWARF additions beyond selected version                                                                          [J
-gpubnames                                    [J                                [J-- Generate DWARF pubnames and pubtypes sections                                                                         [J
-grecord-gcc-switches                         [J                                [J-- Record gcc command line switches in DWARF DW_AT_producer                                                              [J
-gsplit-dwarf                                 [J                                [J-- Generate debug information in separate .dwo files                                                                     [J
-gstrict-dwarf                                [J                                [J-- Don't emit DWARF additions beyond selected version                                                                    [J
-gtoggle                                      [J                                [J-- Toggle debug information generation                                                                                   [J
-gvms                                         [J                                [J-- Generate debug information in VMS format                                                                              [J
-H                                            [J                                [J-- print name of each header file used                                                                                   [J
--help                                        [J--help                          [J-- Display this information                                                                                              [J
-imultiarch                                   [J                                [J-- Set <dir> to be the multiarch include subdirectory                                                                    [J
-iplugindir                                   [J                                [J-- Set <dir> to be the default plugin directory                                                                          [J
-m128bit-long-double                          [J                                [J-- sizeof(long double) is 16                                                                                             [J
-m16                                          [J                                [J-- Generate 16bit i386 code                                                                                              [J
-m32                                          [J                                [J-- Generate 32bit i386 code                                                                                              [J
-m3dnow                                       [J                                [J-- Support 3DNow! built-in functions                                                                                     [J
-m3dnowa                                      [J                                [J-- Support Athlon 3Dnow! built-in functions                                                                              [J
-m64                                          [J                                [J-- Generate 64bit x86-64 code                                                                                            [J
-m8bit-idiv                                   [J                                [J-- Expand 32bit/64bit integer divide into 8bit unsigned integer divide with run-time check                               [J
-m96bit-long-double                           [J                                [J-- sizeof(long double) is 12                                                                                             [J
-mabi                                         [J                                [J-- Generate code that conforms to the given ABI                                                                          [J
-mabm                                         [J                                [J-- Support code generation of Advanced Bit Manipulation (ABM) instructions                                               [J
-maccumulate-outgoing-args                    [J                                [J-- Reserve space for outgoing arguments in the function prologue                                                         [J
-maddress-mode                                [J                                [J-- Use given address mode                                                                                                [J
-madx                                         [J                                [J-- Support flag-preserving add-carry instructions                                                                        [J
-maes                                         [J                                [J-- Support AES built-in functions and code generation                                                                    [J
-malign-data                                  [J                                [J-- Use the given data alignment                                                                                          [J
-malign-double                                [J                                [J-- Align some doubles on dword boundary                                                                                  [J
-malign-functions                             [J                                [J-- Function starts are aligned to this power of 2                                                                        [J
-malign-jumps                                 [J                                [J-- Jump targets are aligned to this power of 2                                                                           [J
-malign-loops                                 [J                                [J-- Loop code aligned to this power of 2                                                                                  [J
-malign-stringops                             [J                                [J-- Align destination of the string operations                                                                            [J
-mandroid                                     [J                                [J-- Generate code for the Android platform                                                                                [J
-march                                        [J                                [J-- generate instructions for CPU type                                                                                    [J
-masm                                         [J                                [J-- Use given assembler dialect                                                                                           [J
-mavx                                         [J                                [J-- Support MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2 and AVX built-in functions and code generation                    [J
-mavx2                                        [J                                [J-- Support MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2, AVX and AVX2 built-in functions and code generation              [J
-mavx256-split-unaligned-load                 [J                                [J-- Split 32-byte AVX unaligned load                                                                                      [J
-mavx256-split-unaligned-store                [J                                [J-- Split 32-byte AVX unaligned store                                                                                     [J
-mavx5124fmaps                                [J                                [J-- Support MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2, AVX, AVX2, AVX512F and AVX5124FMAPS built- in functions and code [J
-mavx5124vnniw                                [J                                [J-- Support MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2, AVX, AVX2, AVX512F and AVX5124VNNIW built- in functions and code [J
-mavx512bw                                    [J                                [J-- Support MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2, AVX, AVX2 and AVX512F and AVX512BW built- in functions and code g[J
-mavx512cd                                    [J                                [J-- Support MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2, AVX, AVX2 and AVX512F and AVX512CD built- in functions and code g[J
-mavx512dq                                    [J                                [J-- Support MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2, AVX, AVX2 and AVX512F and AVX512DQ built- in functions and code g[J
-mavx512er                                    [J                                [J-- Support MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2, AVX, AVX2 and AVX512F and AVX512ER built- in functions and code g[J
-mavx512f                                     [J                                [J-- Support MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2, AVX, AVX2 and AVX512F built-in functions and code generation     [J
-mavx512ifma                                  [J                                [J-- Support MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2, AVX, AVX2 and AVX512F and AVX512IFMA built-in functions and code [J
-mavx512pf                                    [J                                [J-- Support MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2, AVX, AVX2 and AVX512F and AVX512PF built- in functions and code g[J
-mavx512vbmi                                  [J                                [J-- Support MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2, AVX, AVX2 and AVX512F and AVX512VBMI built-in functions and code [J
-mavx512vl                                    [J                                [J-- Support MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2, AVX, AVX2 and AVX512F and AVX512VL built- in functions and code g[J
-mavx512vpopcntdq                             [J                                [J-- Support MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2, AVX, AVX2, AVX512F and AVX512VPOPCNTDQ built-in functions and cod[J
-mbionic                                      [J                                [J-- Use Bionic C library                                                                                                  [J
-mbmi                                         [J                                [J-- Support BMI built-in functions and code generation                                                                    [J
-mbmi2                                        [J                                [J-- Support BMI2 built-in functions and code generation                                                                   [J
-mbranch-cost                                 [J                                [J-- Branches are this expensive (1-5, arbitrary units)                                                                    [J
-mcld                                         [J                                [J-- Generate cld instruction in the function prologue                                                                     [J
-mclflushopt                                  [J                                [J-- Support CLFLUSHOPT instructions                                                                                       [J
-mclwb                                        [J                                [J-- Support CLWB instruction                                                                                              [J
-mclzero                                      [J                                [J-- Support CLZERO built-in functions and code generation                                                                 [J
-mcmodel                                      [J                                [J-- Use given x86-64 code model                                                                                           [J
-mcrc32                                       [J                                [J-- Support code generation of crc32 instruction                                                                          [J
-mcx16                                        [J                                [J-- Support code generation of cmpxchg16b instruction                                                                     [J
-mdispatch-scheduler                          [J                                [J-- Do dispatch scheduling if processor is bdver1, bdver2, bdver3, bdver4 or znver1 and Haifa scheduling is selected      [J
-mf16c                                        [J                                [J-- Support F16C built-in functions and code generation                                                                   [J
-mfancy-math-387                              [J                                [J-- Generate sin, cos, sqrt for FPU                                                                                       [J
-mfentry                                      [J                                [J-- Emit profiling counter call at function entry before prologue                                                         [J
-mfma                                         [J                                [J-- Support MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2, AVX and FMA built-in functions and code generation               [J
-mfma4                                        [J                                [J-- Support FMA4 built-in functions and code generation                                                                   [J
-mforce-drap                                  [J                                [J-- Always use Dynamic Realigned Argument Pointer (DRAP) to realign stack                                                 [J
-mfpmath                                      [J                                [J-- Generate floating point mathematics using given instruction set                                                       [J
-mfp-ret-in-387                               [J                                [J-- Return values of functions in FPU registers                                                                           [J
-mfsgsbase                                    [J                                [J-- Support FSGSBASE built-in functions and code generation                                                               [J
-mfunction-return                             [J                                [J-- Convert function return to call and return thunk                                                                      [J
-mfxsr                                        [J                                [J-- Support FXSAVE and FXRSTOR instructions                                                                               [J
-mgeneral-regs-only                           [J                                [J-- Generate code which uses only the general registers                                                                   [J
-mglibc                                       [J                                [J-- Use GNU C library                                                                                                     [J
-mhard-float                                  [J-m80387                         [J-- Use hardware fp                                                                                                       [J
-mhle                                         [J                                [J-- Support Hardware Lock Elision prefixes                                                                                [J
-miamcu                                       [J                                [J-- Generate code that conforms to Intel MCU psABI                                                                        [J
-mieee-fp                                     [J                                [J-- Use IEEE math for fp comparisons                                                                                      [J
-mincoming-stack-boundary                     [J                                [J-- Assume incoming stack aligned to this power of 2                                                                      [J
-mindirect-branch                             [J                                [J-- Convert indirect call and jump to call and return thunks                                                              [J
-mindirect-branch-register                    [J                                [J-- Force indirect call and jump via register                                                                             [J
-minline-all-stringops                        [J                                [J-- Inline all known string operations                                                                                    [J
-minline-stringops-dynamically                [J                                [J-- Inline memset/memcpy string operations, but perform inline version only for small blocks                              [J
-mlarge-data-threshold                        [J                                [J-- Data greater than given threshold will go into .ldata section in x86-64 medium model                                  [J
-mlong-double-128                             [J                                [J-- Use 128-bit long double                                                                                               [J
-mlong-double-64                              [J                                [J-- Use 64-bit long double                                                                                                [J
-mlong-double-80                              [J                                [J-- Use 80-bit long double                                                                                                [J
-mlwp                                         [J                                [J-- Support LWP built-in functions and code generation                                                                    [J
-mlzcnt                                       [J                                [J-- Support LZCNT built-in function and code generation                                                                   [J
-mmemcpy-strategy                             [J-mmemset-strategy               [J-- Specify memcpy expansion strategy when expected size is known                                                         [J
-mmitigate-rop                                [J                                [J-- Attempt to avoid generating instruction sequences containing ret bytes                                                [J
-mmmx                                         [J                                [J-- Support MMX built-in functions                                                                                        [J
-mmovbe                                       [J                                [J-- Support code generation of movbe instruction                                                                          [J
-mmpx                                         [J                                [J-- Support MPX code generation                                                                                           [J
-mms-bitfields                                [J                                [J-- Use native (MS) bitfield layout                                                                                       [J
-mmusl                                        [J                                [J-- Use musl C library                                                                                                    [J
-mmwaitx                                      [J                                [J-- Support MWAITX and MONITORX built-in functions and code generation                                                    [J
-mno-default                                  [J                                [J-- Clear all tune features                                                                                               [J
-mnop-mcount                                  [J                                [J-- Generate mcount/__fentry__ calls as nops. To activate they need to be patched in                                      [J
-mno-sse4                                     [J                                [J-- Do not support SSE4.1 and SSE4.2 built-in functions and code generation                                               [J
-momit-leaf-frame-pointer                     [J                                [J-- Omit the frame pointer in leaf functions                                                                              [J
-mpc32                                        [J                                [J-- Set 80387 floating-point precision to 32-bit                                                                          [J
-mpc64                                        [J                                [J-- Set 80387 floating-point precision to 64-bit                                                                          [J
-mpc80                                        [J                                [J-- Set 80387 floating-point precision to 80-bit                                                                          [J
-mpclmul                                      [J                                [J-- Support PCLMUL built-in functions and code generation                                                                 [J
-mpku                                         [J                                [J-- Support PKU built-in functions and code generation                                                                    [J
-mpopcnt                                      [J                                [J-- Support code generation of popcnt instruction                                                                         [J
-mprefer-avx128                               [J                                [J-- Use 128-bit AVX instructions instead of 256-bit AVX instructions in the auto-vectorizer                               [J
-mpreferred-stack-boundary                    [J                                [J-- Attempt to keep stack aligned to this power of 2                                                                      [J
-mprefetchwt1                                 [J                                [J-- Support PREFETCHWT1 built-in functions and code generation                                                            [J
-mprfchw                                      [J                                [J-- Support PREFETCHW instruction                                                                                         [J
-mpush-args                                   [J                                [J-- Use push instructions to save outgoing arguments                                                                      [J
-mrdpid                                       [J                                [J-- Support RDPID built-in functions and code generation                                                                  [J
-mrdrnd                                       [J                                [J-- Support RDRND built-in functions and code generation                                                                  [J
-mrdseed                                      [J                                [J-- Support RDSEED instruction                                                                                            [J
-mrecip                                       [J                                [J-- Generate reciprocals instead of divss and sqrtss                                                                      [J
-mrecip                                       [J                                [J-- Control generation of reciprocal estimates                                                                            [J
-mrecord-mcount                               [J                                [J-- Generate __mcount_loc section with all mcount or __fentry__ calls                                                     [J
-mred-zone                                    [J                                [J-- Use red-zone in the x86-64 code                                                                                       [J
-mregparm                                     [J                                [J-- Number of registers used to pass integer arguments                                                                    [J
-mrtd                                         [J                                [J-- Alternate calling convention                                                                                          [J
-mrtm                                         [J                                [J-- Support RTM built-in functions and code generation                                                                    [J
-msahf                                        [J                                [J-- Support code generation of sahf instruction in 64bit x86-64 code                                                      [J
-msgx                                         [J                                [J-- Support SGX built-in functions and code generation                                                                    [J
-msha                                         [J                                [J-- Support SHA1 and SHA256 built-in functions and code generation                                                        [J
-mskip-rax-setup                              [J                                [J-- Skip setting up RAX register when passing variable arguments                                                          [J
-msoft-float                                  [J                                [J-- Do not use hardware fp                                                                                                [J
-msse                                         [J                                [J-- Support MMX and SSE built-in functions and code generation                                                            [J
-msse2                                        [J                                [J-- Support MMX, SSE and SSE2 built-in functions and code generation                                                      [J
-msse2avx                                     [J                                [J-- Encode SSE instructions with VEX prefix                                                                               [J
-msse3                                        [J                                [J-- Support MMX, SSE, SSE2 and SSE3 built-in functions and code generation                                                [J
-msse4.1                                      [J                                [J-- Support MMX, SSE, SSE2, SSE3, SSSE3 and SSE4.1 built-in functions and code generation                                 [J
-msse4.2                                      [J-msse4                          [J-- Support MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1 and SSE4.2 built-in functions and code generation                         [J
-msse4a                                       [J                                [J-- Support MMX, SSE, SSE2, SSE3 and SSE4A built-in functions and code generation                                         [J
-msseregparm                                  [J                                [J-- Use SSE register passing conventions for SF and DF mode                                                               [J
-mssse3                                       [J                                [J-- Support MMX, SSE, SSE2, SSE3 and SSSE3 built-in functions and code generation                                         [J
-mstack-arg-probe                             [J                                [J-- Enable stack probing                                                                                                  [J
-mstack-protector-guard                       [J                                [J-- Use given stack-protector guard                                                                                       [J
-mstackrealign                                [J                                [J-- Realign stack in prologue                                                                                             [J
-mstringop-strategy                           [J                                [J-- Chose strategy to generate stringop using                                                                             [J
-mstv                                         [J                                [J-- Disable Scalar to Vector optimization pass transforming 64-bit integer computations into a vector ones                [J
-mtbm                                         [J                                [J-- Support TBM built-in functions and code generation                                                                    [J
-mtls-dialect                                 [J                                [J-- Use given thread-local storage dialect                                                                                [J
-mtls-direct-seg-refs                         [J                                [J-- Use direct references against %gs when accessing tls data                                                             [J
-mtune                                        [J                                [J-- tune code for CPU type                                                                                                [J
-muclibc                                      [J                                [J-- Use uClibc C library                                                                                                  [J
-mveclibabi                                   [J                                [J-- Vector library ABI to use                                                                                             [J
-mvect8-ret-in-mem                            [J                                [J-- Return 8-byte vectors in memory                                                                                       [J
-mvzeroupper                                  [J                                [J-- Generate vzeroupper instruction before a transfer of control flow out of the function                                 [J
-mx32                                         [J                                [J-- Generate 32bit x86-64 code                                                                                            [J
-mxop                                         [J                                [J-- Support XOP built-in functions and code generation                                                                    [J
-mxsave                                       [J                                [J-- Support XSAVE and XRSTOR instructions                                                                                 [J
-mxsavec                                      [J                                [J-- Support XSAVEC instructions                                                                                           [J
-mxsaveopt                                    [J                                [J-- Support XSAVEOPT instruction                                                                                          [J
-mxsaves                                      [J                                [J-- Support XSAVES and XRSTORS instructions                                                                               [J
-no-canonical-prefixes                        [J                                [J-- Do not canonicalize paths when building relative prefixes to other gcc components                                     [J
-nodefaultlibs                                [J                                [J-- Do not use the standard system libraries when linking                                                                 [J
-nostartfiles                                 [J                                [J-- Do not use the standard system startup files when linking                                                             [J
-nostdlib                                     [J                                [J-- Do not use standard system startup files or libraries when linking                                                    [J
--no-warnings                                 [J                                [J-- Same as -w                                                                                                            [J
--optimize                                    [J                                [J-- Same as -O                                                                                                            [J
--output                                      [J                                [J-- Same as -o                                                                                                            [J
-p                                            [J                                [J-- Enable function profiling for prof                                                                                    [J
-P                                            [J                                [J-- inhibit generation of linkemakers during preprocess                                                                   [J
--param                                       [J                                [J-- Set parameter <param> to value.  See manpage for a complete list of parameters                                        [J
-pass-exit-codes                              [J                                [J-- Exit with highest error code from a phase                                                                             [J
-pedantic                                     [J                                [J-- Issue all mandatory diagnostics in the C standard                                                                     [J
-pedantic-errors                              [J                                [J-- Like -pedantic but issue them as errors                                                                               [J
-pg                                           [J                                [J-- Enable function profiling for gprof                                                                                   [J
-pie                                          [J                                [J-- Create a position independent executable                                                                              [J
-pipe                                         [J                                [J-- Use pipes rather than intermediate files                                                                              [J
-print-file-name                              [J                                [J-- Display the full path to library <library>                                                                            [J
-print-libgcc-file-name                       [J                                [J-- Display the name of the compiler's companion library                                                                  [J
-print-multiarch                              [J                                [J-- Display the target's normalized GNU triplet, used as a component in the library path                                  [J
-print-multi-directory                        [J                                [J-- Display the root directory for versions of libgcc                                                                     [J
-print-multi-lib                              [J                                [J-- Display the mapping between command line options and multiple library search directories                              [J
-print-multi-os-directory                     [J                                [J-- Display the relative path to OS libraries                                                                             [J
-print-prog-name                              [J                                [J-- Display the full path to compiler component <program>                                                                 [J
-print-search-dirs                            [J                                [J-- Display the directories in the compiler's search path                                                                 [J
-print-sysroot                                [J                                [J-- Display the target libraries directory                                                                                [J
-print-sysroot-headers-suffix                 [J                                [J-- Display the sysroot suffix used to find headers                                                                       [J
-quiet                                        [J                                [J-- Do not display functions compiled or elapsed time                                                                     [J
-rdynamic                                     [J                                [J-- Pass the flag -export-dynamic to the ELF linker, on targets that support it                                           [J
-s                                            [J                                [J-- Remove all symbol table and relocation information from the executable                                                [J
-S                                            [J                                [J-- Compile only; do not assemble or link                                                                                 [J
-save-stats                                   [J                                [J-- Save code generation statistics                                                                                       [J
-save-temps                                   [J                                [J-- Do not delete intermediate files                                                                                      [J
-shared                                       [J                                [J-- Create a shared library                                                                                               [J
-shared-libgcc                                [J                                [J-- Force shared libgcc                                                                                                   [J
-specs                                        [J                                [J-- Override built-in specs with the contents of <file>                                                                   [J
-static                                       [J                                [J-- On systems that support dynamic linking, this prevents linking with the shared libraries                              [J
-static-libgcc                                [J                                [J-- Force static libgcc                                                                                                   [J
-std                                          [J                                [J-- assume that the input sources are for specified standard                                                              [J
-symbolic                                     [J                                [J-- Bind references to global symbols when building a shared object                                                       [J
--sysroot                                     [J                                [J-- Use <directory> as the root directory for headers and libraries                                                       [J
--target-help                                 [J                                [J-- Display target specific command line options                                                                          [J
-time                                         [J                                [J-- Time the execution of each subprocess                                                                                 [J
-v                                            [J                                [J-- Enable verbose output                                                                                                 [J
--verbose                                     [J                                [J-- Same as -v                                                                                                            [J
--version                                     [J                                [J-- Display compiler version information                                                                                  [J
--version                                     [J                                [J-- Display version information                                                                                           [J
-version                                      [J                                [J-- Display the compiler's version                                                                                        [J
-w                                            [J                                [J-- Suppress warnings                                                                                                     [J
-W                                            [J                                [J-- This switch is deprecated; use -Wextra instead                                                                        [J
-Wabi                                         [J                                [J-- Warn about things that will change when compiling with an ABI-compliant compiler                                      [J
-Wabi                                         [J                                [J-- Warn about things that change between the current  -fabi-version and the specified version                            [J
-Wabi-tag                                     [J                                [J-- Warn if a subobject has an abi_tag attribute that the complete object type does not have                              [J
-Waddress                                     [J                                [J-- Warn about suspicious uses of memory addresses                                                                        [J
-Waggregate-return                            [J                                [J-- Warn about returning structures, unions or arrays                                                                     [J
-Waggressive-loop-optimizations               [J                                [J-- Warn if a loop with constant number of iterations triggers undefined behavior                                         [J
-Waliasing                                    [J                                [J-- Warn about possible aliasing of dummy arguments                                                                       [J
-Walign-commons                               [J                                [J-- Warn about alignment of COMMON blocks                                                                                 [J
-Waligned-new                                 [J                                [J-- Warn even if 'new' uses a class member allocation function                                                            [J
-Wall                                         [J                                [J-- Enable most warning messages                                                                                          [J
-Walloca                                      [J                                [J-- Warn on any use of alloca                                                                                             [J
-Walloca-larger-than                          [J                                [J-- Warn on unbounded uses of alloca, and on bounded uses of alloca whose bound can be larger than <number> bytes         [J
-Walloc-size-larger-than                      [J                                [J-- Warn for calls to allocation functions that attempt to allocate objects larger than the specified number of bytes     [J
-Walloc-zero                                  [J                                [J-- Warn for calls to allocation functions that specify zero bytes                                                        [J
-Wampersand                                   [J                                [J-- Warn about missing ampersand in continued character constants                                                         [J
-Wargument-mismatch                           [J                                [J-- Warn about type and rank mismatches between arguments and parameters                                                  [J
-Warray-bounds                                [J-Warray-bounds                  [J-- Warn if an array is accessed out of bounds                                                                            [J
-Warray-temporaries                           [J                                [J-- Warn about creation of array temporaries                                                                              [J
-Wassign-intercept                            [J                                [J-- Warn whenever an Objective-C assignment is being intercepted by the garbage collector                                 [J
-Wattributes                                  [J                                [J-- Warn about inappropriate attribute usage                                                                              [J
-Wbad-function-cast                           [J                                [J-- Warn about casting functions to incompatible types                                                                    [J
-Wbool-compare                                [J                                [J-- Warn about boolean expression compared with an integer value different from true/false                                [J
-Wbool-operation                              [J                                [J-- Warn about certain operations on boolean expressions                                                                  [J
-Wbuiltin-declaration-mismatch                [J                                [J-- Warn when a built-in function is declared with the wrong signature                                                    [J
-Wbuiltin-macro-redefined                     [J                                [J-- Warn when a built-in preprocessor macro is undefined or redefined                                                     [J
-Wc++0x-compat                                [J                                [J-- Deprecated in favor of -Wc++11-compat                                                                                 [J
-Wc++11-compat                                [J                                [J-- Warn about C++ constructs whose meaning differs between ISO C++ 1998 and ISO C++ 2011                                 [J
-Wc++14-compat                                [J                                [J-- Warn about C++ constructs whose meaning differs between ISO C++ 2011 and ISO C++ 2014                                 [J
-Wc++1z-compat                                [J                                [J-- Warn about C++ constructs whose meaning differs between ISO C++ 2014 and (forthcoming) ISO C++ 201z(7?)               [J
-Wc90-c99-compat                              [J                                [J-- Warn about features not present in ISO C90, but present in ISO C99                                                    [J
-Wc99-c11-compat                              [J                                [J-- Warn about features not present in ISO C99, but present in ISO C11                                                    [J
-Wcast-align                                  [J                                [J-- Warn about pointer casts which increase alignment                                                                     [J
-Wcast-qual                                   [J                                [J-- Warn about casts which discard qualifiers                                                                             [J
-Wc-binding-type                              [J                                [J-- Warn if the type of a variable might be not interoperable with C                                                      [J
-Wc++-compat                                  [J                                [J-- Warn about C constructs that are not in the common subset of C and C++                                                [J
-Wcharacter-truncation                        [J                                [J-- Warn about truncated character expressions                                                                            [J
-Wchar-subscripts                             [J                                [J-- Warn about subscripts whose type is "char"                                                                            [J
-Wchkp                                        [J                                [J-- Warn about memory access errors found by Pointer Bounds Checker                                                       [J
-Wclobbered                                   [J                                [J-- Warn about variables that might be changed by "longjmp" or "vfork"                                                    [J
-Wcomment                                     [J                                [J-- Warn about possibly nested block comments, and C++ comments spanning more than one physical line                      [J
-Wcomments                                    [J                                [J-- Synonym for -Wcomment                                                                                                 [J
-Wcompare-reals                               [J                                [J-- Warn about equality comparisons involving REAL or COMPLEX expressions                                                 [J
-Wconditionally-supported                     [J                                [J-- Warn for conditionally-supported constructs                                                                           [J
-Wconversion                                  [J                                [J-- Warn for implicit type conversions that may change a value                                                            [J
-Wconversion-extra                            [J                                [J-- Warn about most implicit conversions                                                                                  [J
-Wconversion-null                             [J                                [J-- Warn for converting NULL from/to a non-pointer type                                                                   [J
-Wcoverage-mismatch                           [J                                [J-- Warn in case profiles in -fprofile-use do not match                                                                   [J
-Wcpp                                         [J                                [J-- Warn when a #warning directive is encountered                                                                         [J
-Wctor-dtor-privacy                           [J                                [J-- Warn when all constructors and destructors are private                                                                [J
-Wdangling-else                               [J                                [J-- Warn about dangling else                                                                                              [J
-Wdate-time                                   [J                                [J-- Warn about __TIME__, __DATE__ and __TIMESTAMP__ usage                                                                 [J
-Wdeclaration-after-statement                 [J                                [J-- Warn when a declaration is found after a statement                                                                    [J
-Wdelete-incomplete                           [J                                [J-- Warn when deleting a pointer to incomplete type                                                                       [J
-Wdelete-non-virtual-dtor                     [J                                [J-- Warn about deleting polymorphic objects with non- virtual destructors                                                 [J
-Wdeprecated                                  [J                                [J-- Warn if a deprecated compiler feature, class, method, or field is used                                                [J
-Wdeprecated-declarations                     [J                                [J-- Warn about uses of __attribute__((deprecated)) declarations                                                           [J
-Wdesignated-init                             [J                                [J-- Warn about positional initialization of structs requiring designated initializers                                     [J
-Wdisabled-optimization                       [J                                [J-- Warn when an optimization pass is disabled                                                                            [J
-Wdiscarded-array-qualifiers                  [J                                [J-- Warn if qualifiers on arrays which are pointer targets are discarded                                                  [J
-Wdiscarded-qualifiers                        [J                                [J-- Warn if type qualifiers on pointers are discarded                                                                     [J
-Wdiv-by-zero                                 [J                                [J-- Warn about compile-time integer division by zero                                                                      [J
-Wdouble-promotion                            [J                                [J-- Warn about implicit conversions from "float" to "double"                                                              [J
-Wduplicated-branches                         [J                                [J-- Warn about duplicated branches in if-else statements                                                                  [J
-Wduplicated-cond                             [J                                [J-- Warn about duplicated conditions in an if-else-if chain                                                               [J
-Wduplicate-decl-specifier                    [J                                [J-- Warn when a declaration has duplicate const, volatile, restrict or _Atomic specifier                                  [J
-Weffc++                                      [J-Weffc+                         [J-- Warn about violations of Effective C++ style rules                                                                    [J
-Wempty-body                                  [J                                [J-- Warn about an empty body in an if or else statement                                                                   [J
-Wendif-labels                                [J                                [J-- Warn about stray tokens after #else and #endif                                                                        [J
-Wenum-compare                                [J                                [J-- Warn about comparison of different enum types                                                                         [J
-Werror                                       [J                                [J-- Treat specified warning as error (or all if none specified)                                                           [J
-Wexpansion-to-defined                        [J                                [J-- Warn if "defined" is used outside #if                                                                                 [J
-Wextra                                       [J                                [J-- Print extra (possibly unwanted) warnings                                                                              [J
-Wfatal-errors                                [J                                [J-- Exit on the first error occurred                                                                                      [J
-Wfloat-conversion                            [J                                [J-- Warn for implicit type conversions that cause loss of floating point precision                                        [J
-Wfloat-equal                                 [J                                [J-- Warn if testing floating point numbers for equality                                                                   [J
-Wformat                                      [J-Wformat                        [J-- Warn about printf/scanf/strftime/strfmon format string anomalies                                                      [J
-Wformat-contains-nul                         [J                                [J-- Warn about format strings that contain NUL bytes                                                                      [J
-Wformat-extra-args                           [J                                [J-- Warn if passing too many arguments to a function for its format string                                                [J
-Wformat-nonliteral                           [J                                [J-- Warn about format strings that are not literals                                                                       [J
-Wformat-overflow                             [J-Wformat-overflow               [J-- Warn about function calls with format strings that write past the end of the destination region                       [J
-Wformat-security                             [J                                [J-- Warn about possible security problems with format functions                                                           [J
-Wformat-signedness                           [J                                [J-- Warn about sign differences with format functions                                                                     [J
-Wformat-truncation                           [J                                [J-- Warn about calls to snprintf and similar functions that truncate output. Same as -Wformat- truncation=1.  Same as -Wfo[J
-Wformat-truncation                           [J                                [J-- Warn about calls to snprintf and similar functions that truncate output                                               [J
-Wformat-y2k                                  [J                                [J-- Warn about strftime formats yielding 2-digit years                                                                    [J
-Wformat-zero-length                          [J                                [J-- Warn about zero-length formats                                                                                        [J
-Wframe-address                               [J                                [J-- Warn when __builtin_frame_address or __builtin_return_address is used unsafely                                        [J
-Wframe-larger-than                           [J                                [J-- Warn if a function's stack frame requires more than <number> bytes                                                    [J
-Wfree-nonheap-object                         [J                                [J-- Warn when attempting to free a non-heap object                                                                        [J
-Wfunction-elimination                        [J                                [J-- Warn about function call elimination                                                                                  [J
-Whsa                                         [J                                [J-- Warn when a function cannot be expanded to HSAIL                                                                      [J
-Wignored-attributes                          [J                                [J-- Warn whenever attributes are ignored                                                                                  [J
-Wignored-qualifiers                          [J                                [J-- Warn whenever type qualifiers are ignored                                                                             [J
-Wimplicit                                    [J                                [J-- Warn about implicit declarations                                                                                      [J
-Wimplicit-fallthrough                        [J                                [J-- Warn when a switch case falls through                                                                                 [J
-Wimplicit-function-declaration               [J                                [J-- Warn about implicit function declarations                                                                             [J
-Wimplicit-int                                [J                                [J-- Warn when a declaration does not specify a type                                                                       [J
-Wimplicit-interface                          [J                                [J-- Warn about calls with implicit interface                                                                              [J
-Wimplicit-procedure                          [J                                [J-- Warn about called procedures not explicitly declared                                                                  [J
-Wincompatible-pointer-types                  [J                                [J-- Warn when there is a conversion between pointers that have incompatible types                                         [J
-Winherited-variadic-ctor                     [J                                [J-- Warn about C++11 inheriting constructors when the base has a variadic constructor                                     [J
-Winit-self                                   [J                                [J-- Warn about variables which are initialized to themselves                                                              [J
-Winline                                      [J                                [J-- Warn when an inlined function cannot be inlined                                                                       [J
-Wint-conversion                              [J                                [J-- Warn about incompatible integer to pointer and pointer to integer conversions                                         [J
-Winteger-division                            [J                                [J-- Warn about constant integer divisions with truncated results                                                          [J
-Wint-in-bool-context                         [J                                [J-- Warn for suspicious integer expressions in boolean context                                                            [J
-Wintrinsic-shadow                            [J                                [J-- Warn if a user-procedure has the same name as an intrinsic                                                            [J
-Wintrinsics-std                              [J                                [J-- Warn on intrinsics not part of the selected standard                                                                  [J
-Wint-to-pointer-cast                         [J                                [J-- Warn when there is a cast to a pointer from an integer of a different size                                            [J
-Winvalid-memory-model                        [J                                [J-- Warn when an atomic memory model parameter is known to be outside the valid range                                     [J
-Winvalid-offsetof                            [J                                [J-- Warn about invalid uses of the "offsetof" macro                                                                       [J
-Winvalid-pch                                 [J                                [J-- Warn about PCH files that are found but not used                                                                      [J
-Wjump-misses-init                            [J                                [J-- Warn when a jump misses a variable initialization                                                                     [J
-Wlarger-than                                 [J                                [J-- Warn if an object is larger than <number> bytes                                                                       [J
-Wline-truncation                             [J                                [J-- Warn about truncated source lines                                                                                     [J
-Wliteral-suffix                              [J                                [J-- Warn when a string or character literal is followed by a ud-suffix which does not begin with an underscore            [J
-Wlogical-not-parentheses                     [J                                [J-- Warn when logical not is used on the left hand side operand of a comparison                                           [J
-Wlogical-op                                  [J                                [J-- Warn when a logical operator is suspiciously always evaluating to true or false                                       [J
-Wlong-long                                   [J                                [J-- Do not warn about using "long long" when -pedantic                                                                    [J
-Wlto-type-mismatch                           [J                                [J-- During link time optimization warn about mismatched types of global declarations                                      [J
-Wmain                                        [J                                [J-- Warn about suspicious declarations of "main"                                                                          [J
-Wmaybe-uninitialized                         [J                                [J-- Warn about maybe uninitialized automatic variables                                                                    [J
-Wmemset-elt-size                             [J                                [J-- Warn about suspicious calls to memset where the third argument contains the number of elements not multiplied by the e[J
-Wmemset-transposed-args                      [J                                [J-- Warn about suspicious calls to memset where the third argument is constant literal zero and the second is not         [J
-Wmisleading-indentation                      [J                                [J-- Warn when the indentation of the code does not reflect the block structure                                            [J
-Wmissing-braces                              [J                                [J-- Warn about possibly missing braces around initializers                                                                [J
-Wmissing-declarations                        [J                                [J-- Warn about global functions without previous declarations                                                             [J
-Wmissing-field-initializers                  [J                                [J-- Warn about missing fields in struct initializers                                                                      [J
-Wmissing-include-dirs                        [J                                [J-- Warn about user-specified include directories that do not exist                                                       [J
-Wmissing-parameter-type                      [J                                [J-- Warn about function parameters declared without a type specifier in K&R-style functions                               [J
-Wmissing-prototypes                          [J                                [J-- Warn about global functions without prototypes                                                                        [J
-Wmudflap                                     [J                                [J-- Warn about constructs not instrumented by -fmudflap                                                                   [J
-Wmultichar                                   [J                                [J-- Warn about use of multi-character character constants                                                                 [J
-Wmultiple-inheritance                        [J                                [J-- Warn on direct multiple inheritance                                                                                   [J
-Wnamespaces                                  [J                                [J-- Warn on namespace definition                                                                                          [J
-Wnarrowing                                   [J                                [J-- Warn about narrowing conversions within { } that are ill-formed in C++11                                              [J
-Wnested-externs                              [J                                [J-- Warn about "extern" declarations not at file scope                                                                    [J
-Wnoexcept                                    [J                                [J-- Warn when a noexcept expression evaluates to false even though the expression cant actually throw                     [J
-Wnoexcept-type                               [J                                [J-- Warn if C++1z noexcept function type will change the mangled name of a symbol                                         [J
-Wnonnull                                     [J                                [J-- Warn about NULL being passed to argument slots marked as requiring non-NULL                                           [J
-Wnonnull-compare                             [J                                [J-- Warn if comparing pointer parameter with nonnull attribute with NULL                                                  [J
-Wnon-template-friend                         [J                                [J-- Warn when non-templatized friend functions are declared within a template                                             [J
-Wnon-virtual-dtor                            [J                                [J-- Warn about non-virtual destructors                                                                                    [J
-Wnormalized                                  [J                                [J-- Warn about non-normalised Unicode strings                                                                             [J
-Wnull-dereference                            [J                                [J-- Warn if dereferencing a NULL pointer may lead to erroneous or undefined behavior                                      [J
-Wodr                                         [J                                [J-- Warn about some C++ One Definition Rule violations during link time optimization                                      [J
-Wold-style-cast                              [J                                [J-- Warn if a C-style cast is used in a program                                                                           [J
-Wold-style-declaration                       [J                                [J-- Warn for obsolescent usage in a declaration                                                                           [J
-Wold-style-definition                        [J                                [J-- Warn if an old-style parameter definition is used                                                                     [J
-Wopenmp-simd                                 [J                                [J-- Warn if a simd directive is overridden by the vectorizer cost model                                                   [J
-Woverflow                                    [J                                [J-- Warn about overflow in arithmetic expressions                                                                         [J
-Woverlength-strings                          [J                                [J-- Warn if a string is longer than the maximum portable length specified by the standard                                 [J
-Woverloaded-virtual                          [J                                [J-- Warn about overloaded virtual function names                                                                          [J
-Woverride-init                               [J                                [J-- Warn about overriding initializers without side effects                                                               [J
-Woverride-init-side-effects                  [J                                [J-- Warn about overriding initializers with side effects                                                                  [J
-Wpacked                                      [J                                [J-- Warn when the packed attribute has no effect on struct layout                                                         [J
-Wpacked-bitfield-compat                      [J                                [J-- Warn about packed bit-fields whose offset changed in GCC 4.4                                                          [J
-Wpadded                                      [J                                [J-- Warn when padding is required to align structure members                                                              [J
-Wparentheses                                 [J                                [J-- Warn about possibly missing parentheses                                                                               [J
-Wpedantic                                    [J                                [J-- Issue warnings needed for strict compliance to the standard                                                           [J
-Wplacement-new                               [J                                [J-- Warn for placement new expressions with undefined behavior.  Same as -Wplacement-new=                                 [J
-Wplacement-new                               [J                                [J-- Warn for placement new expressions with undefined behavior                                                            [J
-Wpmf-conversions                             [J                                [J-- Warn when converting the type of pointers to member functions                                                         [J
-Wpointer-arith                               [J                                [J-- Warn about function pointer arithmetic                                                                                [J
-Wpointer-compare                             [J                                [J-- Warn when a pointer is compared with a zero character constant                                                        [J
-Wpointer-sign                                [J                                [J-- Warn when a pointer differs in signedness in an assignment                                                            [J
-Wpointer-to-int-cast                         [J                                [J-- Warn when a pointer is cast to an integer of a different size                                                         [J
-Wpoison-system-directories                   [J                                [J-- Warn for -I and -L options using system directories if cross compiling                                                [J
-Wpragmas                                     [J                                [J-- Warn about misuses of pragmas                                                                                         [J
-Wproperty-assign-default                     [J                                [J-- Warn if a property for an Objective-C object has no assign semantics specified                                        [J
-Wprotocol                                    [J                                [J-- Warn if inherited methods are unimplemented                                                                           [J
-Wrealloc-lhs                                 [J                                [J-- Warn when a left-hand-side array variable is reallocated                                                              [J
-Wrealloc-lhs-all                             [J                                [J-- Warn when a left-hand-side variable is reallocated                                                                    [J
-Wreal-q-constant                             [J                                [J-- Warn about real-literal-constants with 'q' exponent-letter                                                            [J
-Wredundant-decls                             [J                                [J-- Warn about multiple declarations of the same object                                                                   [J
-Wregister                                    [J                                [J-- Warn about uses of register storage specifier                                                                         [J
-Wreorder                                     [J                                [J-- Warn when the compiler reorders code                                                                                  [J
-Wrestrict                                    [J                                [J-- Warn when an argument passed to a restrict- qualified parameter aliases with another argument                         [J
-Wreturn-local-addr                           [J                                [J-- Warn about returning a pointer/reference to a local or temporary variable                                             [J
-Wreturn-type                                 [J                                [J-- Warn whenever a function's return type defaults to "int" (C), or about inconsistent return types (C++)                [J
-Wscalar-storage-order                        [J                                [J-- Warn on suspicious constructs involving reverse scalar storage order                                                  [J
-Wselector                                    [J                                [J-- Warn if a selector has multiple methods                                                                               [J
-Wsequence-point                              [J                                [J-- Warn about possible violations of sequence point rules                                                                [J
-Wshadow                                      [J                                [J-- Warn when one variable shadows another.  Same as  -Wshadow=global                                                     [J
-Wshadow-ivar                                 [J                                [J-- Warn if a local declaration hides an instance variable                                                                [J
-Wshift-count-negative                        [J                                [J-- Warn if shift count is negative                                                                                       [J
-Wshift-count-overflow                        [J                                [J-- Warn if shift count >= width of type                                                                                  [J
-Wshift-negative-value                        [J                                [J-- Warn if left shifting a negative value                                                                                [J
-Wshift-overflow                              [J                                [J-- Warn if left shift of a signed value overflows.  Same as -Wshift-overflow=                                            [J
-Wshift-overflow                              [J                                [J-- Warn if left shift of a signed value overflows                                                                        [J
-Wsign-compare                                [J                                [J-- Warn about signed-unsigned comparisons                                                                                [J
-Wsign-conversion                             [J                                [J-- Warn for implicit type conversions between signed and unsigned integers                                               [J
-Wsign-promo                                  [J                                [J-- Warn when overload promotes from unsigned to signed                                                                   [J
-Wsized-deallocation                          [J                                [J-- Warn about missing sized deallocation functions                                                                       [J
-Wsizeof-array-argument                       [J                                [J-- Warn when sizeof is applied on a parameter declared as an array                                                       [J
-Wsizeof-pointer-memaccess                    [J                                [J-- Warn about suspicious length parameters to certain string functions if the argument uses sizeof                       [J
-Wstack-protector                             [J                                [J-- Warn when not issuing stack smashing protection for some reason                                                       [J
-Wstack-usage                                 [J                                [J-- Warn if stack usage might be larger than specified amount                                                             [J
-Wstrict-aliasing                             [J-Wstrict-aliasing               [J-- Warn about code which might break strict aliasing rules                                                               [J
-Wstrict-null-sentinel                        [J                                [J-- Warn about uncasted NULL used as sentinel                                                                             [J
-Wstrict-overflow                             [J-Wstrict-overflow               [J-- Warn about optimizations that assume that signed overflow is undefined                                                [J
-Wstrict-prototypes                           [J                                [J-- Warn about unprototyped function declarations                                                                         [J
-Wstrict-selector-match                       [J                                [J-- Warn if type signatures of candidate methods do not match exactly                                                     [J
-Wstringop-overflow                           [J                                [J-- Warn about buffer overflow in string manipulation functions like memcpy and strcpy.  Same as  -Wstringop-overflow=    [J
-Wstringop-overflow                           [J                                [J-- Under the control of Object Size type, warn about buffer overflow in string manipulation functions like memcpy and str[J
-Wsubobject-linkage                           [J                                [J-- Warn if a class type has a base or a field whose type uses the anonymous namespace or depends on a type with no linkag[J
-Wsuggest-attribute                           [J                                [J-- warn about functions that might be candidates for attributes                                                          [J
-Wsuggest-final-methods                       [J                                [J-- Warn about C++ virtual methods where adding final keyword would improve code quality                                  [J
-Wsuggest-final-types                         [J                                [J-- Warn about C++ polymorphic types where adding final keyword would improve code quality                                [J
-Wsuggest-override                            [J                                [J-- Suggest that the override keyword be used when the declaration of a virtual function overrides another                [J
-Wsurprising                                  [J                                [J-- Warn about "suspicious" constructs                                                                                    [J
-Wswitch                                      [J                                [J-- Warn about enumerated switches, with no default, missing a case                                                       [J
-Wswitch-bool                                 [J                                [J-- Warn about switches with boolean controlling expression                                                               [J
-Wswitch-default                              [J                                [J-- Warn about enumerated switches missing a "default-" statement                                                         [J
-Wswitch-enum                                 [J                                [J-- Warn about all enumerated switches missing a specific case                                                            [J
-Wswitch-unreachable                          [J                                [J-- Warn about statements between switch's controlling expression and the first case                                      [J
-Wsync-nand                                   [J                                [J-- Warn when __sync_fetch_and_nand and __sync_nand_and_fetch built-in functions are used                                 [J
-Wsynth                                       [J                                [J-- Deprecated. This switch has no effect                                                                                 [J
-Wsystem-headers                              [J                                [J-- Do not suppress warnings from system headers                                                                          [J
-Wtabs                                        [J                                [J-- Permit nonconforming uses of the tab character                                                                        [J
-Wtarget-lifetime                             [J                                [J-- Warn if the pointer in a pointer assignment might outlive its target                                                  [J
-Wtautological-compare                        [J                                [J-- Warn if a comparison always evaluates to true or false                                                                [J
-Wtemplates                                   [J                                [J-- Warn on primary template declaration                                                                                  [J
-Wterminate                                   [J                                [J-- Warn if a throw expression will always result in a call to terminate()                                                [J
-Wtraditional                                 [J                                [J-- Warn about features not present in traditional C                                                                      [J
-Wtraditional-conversion                      [J                                [J-- Warn of prototypes causing type conversions different from what would happen in the absence of prototype              [J
-Wtrampolines                                 [J                                [J-- Warn whenever a trampoline is generated                                                                               [J
-Wtrigraphs                                   [J                                [J-- Warn if trigraphs are encountered that might affect the meaning of the program                                        [J
-Wtype-limits                                 [J                                [J-- Warn if a comparison is always true or always false due to the limited range of the data type                         [J
-Wundeclared-selector                         [J                                [J-- Warn about @selector()s without previously declared methods                                                           [J
-Wundef                                       [J                                [J-- Warn if an undefined macro is used in an #if directive                                                                [J
-Wundefined-do-loop                           [J                                [J-- Warn about an invalid DO loop                                                                                         [J
-Wunderflow                                   [J                                [J-- Warn about underflow of numerical constant expressions                                                                [J
-Wuninitialized                               [J                                [J-- Warn about uninitialized automatic variables                                                                          [J
-Wunknown-pragmas                             [J                                [J-- Warn about unrecognized pragmas                                                                                       [J
-Wunreachable-code                            [J                                [J-- Does nothing. Preserved for backward compatibility                                                                    [J
-Wunsafe-loop-optimizations                   [J                                [J-- Warn if the loop cannot be optimized due to nontrivial assumptions                                                    [J
-Wunsuffixed-float-constants                  [J                                [J-- Warn about unsuffixed float constants                                                                                 [J
-Wunused                                      [J                                [J-- Enable all -Wunused- warnings                                                                                         [J
-Wunused-but-set-parameter                    [J                                [J-- Warn when a function parameter is only set, otherwise unused                                                          [J
-Wunused-but-set-variable                     [J                                [J-- Warn when a variable is only set, otherwise unused                                                                    [J
-Wunused-const-variable                       [J                                [J-- Warn when a const variable is unused.  Same as  -Wunused-const-variable=                                              [J
-Wunused-const-variable                       [J                                [J-- Warn when a const variable is unused                                                                                  [J
-Wunused-dummy-argument                       [J                                [J-- Warn about unused dummy arguments                                                                                     [J
-Wunused-function                             [J                                [J-- Warn when a function is unused                                                                                        [J
-Wunused-label                                [J                                [J-- Warn when a label is unused                                                                                           [J
-Wunused-local-typedefs                       [J                                [J-- Warn when typedefs locally defined in a function are not used                                                         [J
-Wunused-macros                               [J                                [J-- Warn about macros defined in the main file that are not used                                                          [J
-Wunused-parameter                            [J                                [J-- Warn when a function parameter is unused                                                                              [J
-Wunused-result                               [J                                [J-- Warn if a caller of a function, marked with attribute warn_unused_result, does not use its return value               [J
-Wunused-value                                [J                                [J-- Warn when an expression value is unused                                                                               [J
-Wunused-variable                             [J                                [J-- Warn when a variable is unused                                                                                        [J
-Wuseless-cast                                [J                                [J-- Warn about useless casts                                                                                              [J
-Wuse-without-only                            [J                                [J-- Warn about USE statements that have no ONLY qualifier                                                                 [J
-Wvarargs                                     [J                                [J-- Warn about questionable usage of the macros used to retrieve variable arguments                                       [J
-Wvariadic-macros                             [J                                [J-- Warn about using variadic macros                                                                                      [J
-Wvector-operation-performance                [J                                [J-- Warn when a vector operation is compiled outside the SIMD                                                             [J
-Wvirtual-inheritance                         [J                                [J-- Warn on direct virtual inheritance                                                                                    [J
-Wvirtual-move-assign                         [J                                [J-- Warn if a virtual base has a non-trivial move assignment operator                                                     [J
-Wvla                                         [J                                [J-- Warn if a variable length array is used                                                                               [J
-Wvla-larger-than                             [J                                [J-- Warn on unbounded uses of variable-length arrays, and on bounded uses of variable-length arrays whose bound can be lar[J
-Wvolatile-register-var                       [J                                [J-- Warn when a register variable is declared volatile                                                                    [J
-Wwrite-strings                               [J                                [J-- In C++, nonzero means warn about deprecated conversion from string literals to 'char *'.  In C, similar warning, excep[J
-Wzero-as-null-pointer-constant               [J                                [J-- Warn when a literal '0' is used as null pointer                                                                       [J
-Wzerotrip                                    [J                                [J-- Warn about zero-trip DO loops                                                                                         [J
-x                                            [J                                [J-- Specify the language of the following input files                                                                     [J
[0m-A                  [J-fno-stack-limit    [J-imacros            [J-iwithprefix        [J-M                  [J-O                  [J-V                  [J-Xassembler         [J                                    
-b                  [J-g                  [J-include            [J-iwithprefixbefore  [J-mreg-alloc         [J-T                  [J-Wa,                [J-Xlinker            [J                                    
-d                  [J-I                  [J-iprefix            [J-l                  [J-mthreads           [J-u                  [J-Wl,                [J-Xpreprocessor      [J                                    
-D                  [J-idirafter          [J-isystem            [J-L                  [J-o                  [J-U                  [J-Wp,                [J                                                      
[0m[27m[24m[J
[1;33mlarryc[0m@[1;32mAUS1S-LACAMPBE2[0m:[1;36m~/projects/Heron[0m [1;35mÓÇ† [0m[1;35mmain[0m  is [1;38;5;208müì¶ [0m[1;38;5;208mv0.1.0[0m [1;33müêç [0m[1;33m[0m[1;33mv3.8.10[0m[1;33m [0m 

[38;5;178mHeron[0m[38;5;178m [0m
[1;32m$[0m [32mgcc[39m -[K[?2004l
[1m[7m%[27m[1m[0m                                                                                                                                                                                                         [0m[27m[24m[J
[1;33mlarryc[0m@[1;32mAUS1S-LACAMPBE2[0m:[1;36m~/projects/Heron[0m [1;35mÓÇ† [0m[1;35mmain[0m  is [1;38;5;208müì¶ [0m[1;38;5;208mv0.1.0[0m [1;33müêç [0m[1;33m[0m[1;33mv3.8.10[0m[1;33m [0m 

[38;5;178mHeron[0m[38;5;178m [0m
[1;31m$[0m [K[?1h=[?2004h[1m[31me[0m[39m[0m[32me[32mx[39m[1m[31me[1m[31mx[1m[31mi[0m[39m[0m[32me[0m[32mx[0m[32mi[32mt[39m[?1l>[?2004l

Script done on 2022-07-18 23:14:30-05:00 [COMMAND_EXIT_CODE="130"]
